package feegrant

import (
	"time"

	"github.com/Moonyongjung/xpla.go/core"
	"github.com/Moonyongjung/xpla.go/key"
	"github.com/Moonyongjung/xpla.go/types"
	"github.com/Moonyongjung/xpla.go/util"

	sdk "github.com/cosmos/cosmos-sdk/types"
	"github.com/cosmos/cosmos-sdk/x/feegrant"
)

// Parsing - fee grant
func parseGrantArgs(grantMsg types.GrantMsg, privKey key.PrivateKey) (*feegrant.MsgGrantAllowance, error) {
	granter := util.GetAddrByPrivKey(privKey)
	if grantMsg.Granter != granter.String() {
		return nil, util.LogErr("Account address generated by private key is not equal input granter of msg")
	}

	grantee, err := sdk.AccAddressFromBech32(grantMsg.Grantee)
	if err != nil {
		return nil, err
	}
	spendLimit, err := sdk.ParseCoinsNormalized(util.DenomAdd(grantMsg.SpendLimit))
	if err != nil {
		return nil, err
	}

	basic := feegrant.BasicAllowance{
		SpendLimit: spendLimit,
	}

	var expireTime time.Time
	if grantMsg.Expiration != "" {
		expireTime, err := time.Parse(time.RFC3339, grantMsg.Expiration)
		if err != nil {
			return nil, err
		}
		basic.Expiration = &expireTime
	}

	var grant feegrant.FeeAllowanceI
	grant = &basic

	periodClock := util.FromStringToInt64(grantMsg.Period)

	if periodClock > 0 || grantMsg.PeriodLimit != "" {
		periodLimit, err := sdk.ParseCoinsNormalized(util.DenomAdd(grantMsg.PeriodLimit))
		if err != nil {
			return nil, err
		}

		if periodClock <= 0 {
			return nil, util.LogErr("period clock was not set")
		}

		if periodLimit == nil {
			return nil, util.LogErr("period limit was not set")
		}

		periodReset := getPeriodReset(periodClock)
		if grantMsg.Expiration != "" && periodReset.Sub(expireTime) > 0 {
			return nil, util.LogErr("period (", periodClock, ") cannot reset after expiration (", grantMsg.Expiration, ")")
		}

		periodic := feegrant.PeriodicAllowance{
			Basic:            basic,
			Period:           getPeriod(periodClock),
			PeriodReset:      getPeriodReset(periodClock),
			PeriodSpendLimit: periodLimit,
			PeriodCanSpend:   periodLimit,
		}

		grant = &periodic
	}

	if len(grantMsg.AllowedMsg) > 0 {
		grant, err = feegrant.NewAllowedMsgAllowance(grant, grantMsg.AllowedMsg)
		if err != nil {
			return nil, err
		}
	}

	msg, err := feegrant.NewMsgGrantAllowance(grant, granter, grantee)
	if err != nil {
		return nil, err
	}

	return msg, nil
}

// Parsing - fee grant revoke
func parseRevokeGrantArgs(revokeGrantMsg types.RevokeGrantMsg, privKey key.PrivateKey) (feegrant.MsgRevokeAllowance, error) {
	granter := util.GetAddrByPrivKey(privKey)
	if revokeGrantMsg.Granter != granter.String() {
		return feegrant.MsgRevokeAllowance{}, util.LogErr("Account address generated by private key is not equal input granter of msg")
	}
	grantee, err := sdk.AccAddressFromBech32(revokeGrantMsg.Grantee)
	if err != nil {
		return feegrant.MsgRevokeAllowance{}, err
	}

	msg := feegrant.NewMsgRevokeAllowance(granter, grantee)

	return msg, nil
}

// Parsing - query grants
func parseQueryGrantArgs(queryGrantMsg types.QueryGrantMsg) (feegrant.QueryAllowanceRequest, error) {
	granter, err := sdk.AccAddressFromBech32(queryGrantMsg.Granter)
	if err != nil {
		return feegrant.QueryAllowanceRequest{}, err
	}
	grantee, err := sdk.AccAddressFromBech32(queryGrantMsg.Grantee)
	if err != nil {
		return feegrant.QueryAllowanceRequest{}, err
	}

	return feegrant.QueryAllowanceRequest{
		Granter: granter.String(),
		Grantee: grantee.String(),
	}, nil
}

// Parsing - grants by grantee
func parseQueryGrantsByGranteeArgs(queryGrantMsg types.QueryGrantMsg) (feegrant.QueryAllowancesRequest, error) {
	grantee, err := sdk.AccAddressFromBech32(queryGrantMsg.Grantee)
	if err != nil {
		return feegrant.QueryAllowancesRequest{}, err
	}

	return feegrant.QueryAllowancesRequest{
		Grantee:    grantee.String(),
		Pagination: core.PageRequest,
	}, nil
}

// Parsing - grants by granter
func parseQueryGrantsByGranterArgs(queryGrantMsg types.QueryGrantMsg) (feegrant.QueryAllowancesByGranterRequest, error) {
	granter, err := sdk.AccAddressFromBech32(queryGrantMsg.Granter)
	if err != nil {
		return feegrant.QueryAllowancesByGranterRequest{}, err
	}

	return feegrant.QueryAllowancesByGranterRequest{
		Granter:    granter.String(),
		Pagination: core.PageRequest,
	}, nil
}

func getPeriodReset(duration int64) time.Time {
	return time.Now().Add(getPeriod(duration))
}

func getPeriod(duration int64) time.Duration {
	return time.Duration(duration) * time.Second
}
